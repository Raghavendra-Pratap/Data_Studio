name: Beta Packaging - Cross-Platform Build

on:
  workflow_dispatch:
    inputs:
      beta_version:
        description: 'Beta version to package (e.g., 2.0.1-beta)'
        required: true
        default: '2.0.1-beta'
      target_platforms:
        description: 'Target platforms to build'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - macos-only
          - windows-only
          - linux-only

jobs:
  # Package for macOS
  package-macos:
    runs-on: macos-latest
    name: macOS Package Build
    if: ${{ github.event.inputs.target_platforms == 'all' || github.event.inputs.target_platforms == 'macos-only' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug repository structure
      run: |
        echo "üîç Debugging repository structure..."
        echo "Current directory: $(pwd)"
        echo "Repository contents:"
        ls -la
        echo ""
        echo "Looking for project directories..."
        if [ -d "unified-data-studio-v2" ]; then
          echo "‚úÖ Found unified-data-studio-v2 directory"
          ls -la unified-data-studio-v2/
        else
          echo "‚ùå unified-data-studio-v2 directory not found"
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: unified-data-studio-v2/frontend/package-lock.json

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install frontend dependencies
      working-directory: unified-data-studio-v2/frontend
      run: npm ci

    - name: Build frontend
      working-directory: unified-data-studio-v2/frontend
      run: npm run build

    - name: Build Rust backend
      working-directory: unified-data-studio-v2/backend
      run: cargo build --release

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      working-directory: unified-data-studio-v2
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build Electron App for macOS
      working-directory: unified-data-studio-v2/frontend
      run: |
        echo "üçé Building Electron app for macOS..."
        npx electron-builder --mac --publish=never
        echo "‚úÖ macOS build completed"

    - name: Upload macOS package
      uses: actions/upload-artifact@v4
      with:
        name: macos-package-${{ github.event.inputs.beta_version }}
        path: unified-data-studio-v2/frontend/dist/
        retention-days: 7

  # Package for Linux
  package-linux:
    runs-on: ubuntu-latest
    name: Linux Package Build
    if: ${{ github.event.inputs.target_platforms == 'all' || github.event.inputs.target_platforms == 'linux-only' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug repository structure
      run: |
        echo "üîç Debugging repository structure..."
        echo "Current directory: $(pwd)"
        echo "Repository contents:"
        ls -la
        echo ""
        echo "Looking for project directories..."
        if [ -d "unified-data-studio-v2" ]; then
          echo "‚úÖ Found unified-data-studio-v2 directory"
          ls -la unified-data-studio-v2/
        else
          echo "‚ùå unified-data-studio-v2 directory not found"
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: unified-data-studio-v2/frontend/package-lock.json

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install frontend dependencies
      working-directory: unified-data-studio-v2/frontend
      run: npm ci

    - name: Build frontend
      working-directory: unified-data-studio-v2/frontend
      run: npm run build

    - name: Build Rust backend
      working-directory: unified-data-studio-v2/backend
      run: cargo build --release

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      working-directory: unified-data-studio-v2
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build Electron App for Linux
      working-directory: unified-data-studio-v2/frontend
      run: |
        echo "üêß Building Electron app for Linux..."
        npx electron-builder --linux --publish=never
        echo "‚úÖ Linux build completed"

    - name: Upload Linux package
      uses: actions/upload-artifact@v4
      with:
        name: linux-package-${{ github.event.inputs.beta_version }}
        path: unified-data-studio-v2/frontend/dist/
        retention-days: 7

  # Package for Windows
  package-windows:
    runs-on: windows-latest
    name: Windows Package Build
    if: ${{ github.event.inputs.target_platforms == 'all' || github.event.inputs.target_platforms == 'windows-only' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug repository structure
      run: |
        echo "üîç Debugging repository structure..."
        echo "Current directory: $(pwd)"
        echo "Repository contents:"
        dir
        echo ""
        echo "Looking for project directories..."
        if (Test-Path "unified-data-studio-v2") {
          echo "‚úÖ Found unified-data-studio-v2 directory"
          dir unified-data-studio-v2
        } else {
          echo "‚ùå unified-data-studio-v2 directory not found"
        }

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: unified-data-studio-v2/frontend/package-lock.json

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install frontend dependencies
      working-directory: unified-data-studio-v2/frontend
      run: npm ci

    - name: Build frontend
      working-directory: unified-data-studio-v2/frontend
      run: npm run build

    - name: Build Rust backend
      working-directory: unified-data-studio-v2/backend
      run: cargo build --release

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      working-directory: unified-data-studio-v2
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build Electron App for Windows
      working-directory: unified-data-studio-v2/frontend
      run: |
        echo "ü™ü Building Electron app for Windows..."
        npx electron-builder --win --publish=never
        echo "‚úÖ Windows build completed"

    - name: Upload Windows package
      uses: actions/upload-artifact@v4
      with:
        name: windows-package-${{ github.event.inputs.beta_version }}
        path: unified-data-studio-v2/frontend/dist/
        retention-days: 7

  # Create beta release
  create-beta-release:
    runs-on: ubuntu-latest
    name: Create Beta Release
    needs: [package-macos, package-linux, package-windows]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all packages
      uses: actions/download-artifact@v4
      with:
        path: packages/

    - name: List downloaded packages
      run: |
        echo "üì¶ Downloaded packages:"
        ls -la packages/
        echo ""
        echo "üìÅ Package contents:"
        for dir in packages/*/; do
          echo "Directory: $dir"
          ls -la "$dir" || echo "Could not list $dir"
        done

    - name: Create Beta Release
      id: create_beta_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.beta_version }}
        release_name: Data Studio v2 Beta - ${{ github.event.inputs.beta_version }}
        body: |
          ## üöÄ Data Studio v2 Beta Release ${{ github.event.inputs.beta_version }}
          
          ### ‚ö†Ô∏è Beta Version Notice
          This is a **beta release** for testing purposes. Please report any issues you encounter.
          
          ### ‚ú® Features in this Beta
          - Advanced data processing with Rust backend
          - React-based modern UI
          - Cross-platform Electron desktop app
          - Workflow engine for data transformations
          - Advanced formula support
          
          ### üì¶ Downloads
          - **Windows**: `.exe` installer
          - **macOS**: `.dmg` package  
          - **Linux**: `.AppImage` package
          
          ### üîß Technical Details
          - Rust backend for performance
          - TypeScript frontend
          - Tailwind CSS styling
          - Cross-platform compatibility
          
          ### üß™ Testing Instructions
          1. Download the appropriate package for your platform
          2. Install and run the application
          3. Test core functionality (file import, workflow building, formulas)
          4. Report any bugs or issues
          
          ### üìã Known Issues
          - This is a beta version - some features may be unstable
          - Performance optimizations are ongoing
          
          ### üîÑ Next Steps
          - Report bugs and issues
          - Provide feedback on user experience
          - Help identify areas for improvement
          
          ### üìö Documentation
          - [Setup Guide](SETUP.md)
          - [Cross-platform Build Guide](CROSS_PLATFORM_BUILD.md)
          - [Integration Guide](INTEGRATION_GUIDE.md)
          
          ### ü§ù Contributing
          We welcome feedback and bug reports for this beta release!
          
          ### üìÑ License
          MIT License - see LICENSE file for details.

    - name: Upload macOS Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_beta_release.outputs.upload_url }}
        asset_path: packages/macos-package-${{ github.event.inputs.beta_version }}/
        asset_name: Data-Studio-v2-${{ github.event.inputs.beta_version }}-macOS.dmg
        asset_content_type: application/octet-stream
      if: needs.package-macos.result == 'success'

    - name: Upload Linux Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_beta_release.outputs.upload_url }}
        asset_path: packages/linux-package-${{ github.event.inputs.beta_version }}/
        asset_name: Data-Studio-v2-${{ github.event.inputs.beta_version }}-Linux.AppImage
        asset_content_type: application/octet-stream
      if: needs.package-linux.result == 'success'

    - name: Upload Windows Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_beta_release.outputs.upload_url }}
        asset_path: packages/windows-package-${{ github.event.inputs.beta_version }}/
        asset_name: Data-Studio-v2-${{ github.event.inputs.beta_version }}-Windows.exe
        asset_content_type: application/octet-stream
      if: needs.package-windows.result == 'success'

    - name: Beta release completion notification
      run: |
        echo "üéâ Beta release ${{ github.event.inputs.beta_version }} completed!"
        echo "üì¶ Individual OS packages uploaded to GitHub release"
        echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.event.inputs.beta_version }}"
        echo ""
        echo "‚úÖ Ready for beta testing!"
