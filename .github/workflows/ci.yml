name: CI - Cross-Platform Build & Test

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  # Test on Ubuntu (Linux)
  test-ubuntu:
    runs-on: ubuntu-latest
    name: Ubuntu Build & Test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Build frontend
      working-directory: frontend
      run: npm run build

    - name: Test frontend build
      working-directory: frontend
      run: |
        echo "‚úÖ Frontend build successful"
        ls -la build/

    - name: Build Rust backend
      working-directory: backend
      run: cargo build --release

    - name: Test Rust backend
      working-directory: backend
      run: |
        echo "‚úÖ Backend build successful"
        ls -la target/release/

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test project structure
      run: |
        echo "üîç Testing project structure..."
        echo "Current directory: $(pwd)"
        echo "Frontend exists: $(test -d frontend && echo 'YES' || echo 'NO')"
        echo "Backend exists: $(test -d backend && echo 'YES' || echo 'NO')"
        echo "Requirements.txt exists: $(test -f requirements.txt && echo 'YES' || echo 'NO')"
        echo "Build script exists: $(test -f build_complete_package.py && echo 'YES' || echo 'NO')"

  # Test on macOS
  test-macos:
    runs-on: macos-latest
    name: macOS Build & Test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Build frontend
      working-directory: frontend
      run: npm run build

    - name: Test frontend build
      working-directory: frontend
      run: |
        echo "‚úÖ Frontend build successful"
        ls -la build/

    - name: Build Rust backend
      working-directory: backend
      run: cargo build --release

    - name: Test Rust backend
      working-directory: backend
      run: |
        echo "‚úÖ Backend build successful"
        ls -la target/release/

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test project structure
      run: |
        echo "üîç Testing project structure..."
        echo "Current directory: $(pwd)"
        echo "Frontend exists: $(test -d frontend && echo 'YES' || echo 'NO')"
        echo "Backend exists: $(test -d backend && echo 'YES' || echo 'NO')"
        echo "Requirements.txt exists: $(test -f requirements.txt && echo 'YES' || echo 'NO')"
        echo "Build script exists: $(test -f build_complete_package.py && echo 'YES' || echo 'NO')"

  # Test on Windows
  test-windows:
    runs-on: windows-latest
    name: Windows Build & Test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Build frontend
      working-directory: frontend
      run: npm run build

    - name: Test frontend build
      working-directory: frontend
      run: |
        echo "‚úÖ Frontend build successful"
        dir build

    - name: Build Rust backend
      working-directory: backend
      run: cargo build --release

    - name: Test Rust backend
      working-directory: backend
      run: |
        echo "‚úÖ Backend build successful"
        dir target\release

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test project structure
      run: |
        echo "üîç Testing project structure..."
        echo "Current directory: $PWD"
        if (Test-Path "frontend") { echo "Frontend exists: YES" } else { echo "Frontend exists: NO" }
        if (Test-Path "backend") { echo "Backend exists: YES" } else { echo "Backend exists: NO" }
        if (Test-Path "requirements.txt") { echo "Requirements.txt exists: YES" } else { echo "Requirements.txt exists: NO" }
        if (Test-Path "build_complete_package.py") { echo "Build script exists: YES" } else { echo "Build script exists: NO" }

  # Cross-platform validation
  validate-cross-platform:
    needs: [test-ubuntu, test-macos, test-windows]
    runs-on: ubuntu-latest
    name: Cross-Platform Validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate all platforms passed
      run: |
        echo "üéâ All platform tests passed successfully!"
        echo "‚úÖ Ubuntu: ${{ needs.test-ubuntu.result }}"
        echo "‚úÖ macOS: ${{ needs.test-macos.result }}"
        echo "‚úÖ Windows: ${{ needs.test-windows.result }}"
        echo ""
        echo "üöÄ CI pipeline is working correctly across all platforms!"
        echo "üì¶ Ready for cross-platform packaging and releases!"
