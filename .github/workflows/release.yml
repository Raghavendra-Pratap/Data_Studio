name: Release Data Studio v2

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.1)'
        required: true
        default: '1.0.1'

jobs:
  build-and-release:
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug repository structure
      run: |
        echo "=== Repository Structure Debug ==="
        echo "Current working directory: $(pwd)"
        echo "Root directory contents:"
        ls -la
        echo ""
        echo "Looking for key files:"
        echo "requirements.txt exists: $([ -f requirements.txt ] && echo 'YES' || echo 'NO')"
        echo "build_complete_package.py exists: $([ -f build_complete_package.py ] && echo 'YES' || echo 'NO')"
        echo "frontend/ exists: $([ -d frontend ] && echo 'YES' || echo 'NO')"
        echo "backend/ exists: $([ -d backend ] && echo 'YES' || echo 'NO')"
        echo ""
        echo "Full directory tree (first 3 levels):"
        find . -maxdepth 3 -type d | head -20
        echo "=== End Debug ==="

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Build frontend
      working-directory: frontend
      run: npm run build

    - name: Build Rust backend
      working-directory: backend
      run: cargo build --release

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      working-directory: .
      run: |
        python -m pip install --upgrade pip
        echo "Current working directory: $(pwd)"
        echo "Listing files in current directory:"
        ls -la
        echo "Looking for requirements.txt:"
        find . -name "requirements.txt" -type f
        echo "Installing Python dependencies:"
        pip install -r requirements.txt

    - name: Build complete package
      working-directory: .
      run: python build_complete_package.py

    - name: Build Electron App
      working-directory: frontend
      run: |
        # Build React app first
        npm run build
        # Build for current platform only
        if [ "${{ matrix.platform }}" = "ubuntu-latest" ]; then
          echo "Building for Linux..."
          npx electron-builder --linux --publish=never
        elif [ "${{ matrix.platform }}" = "windows-latest" ]; then
          echo "Building for Windows..."
          npx electron-builder --win --publish=never
        elif [ "${{ matrix.platform }}" = "macos-latest" ]; then
          echo "Building for macOS..."
          npx electron-builder --mac --publish=never
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Data Studio v2 ${{ github.ref_name }}
        body: |
          ## üöÄ Data Studio v2 Release ${{ github.ref_name }}
          
          ### ‚ú® New Features
          - Advanced data processing with Rust backend
          - React-based modern UI
          - Cross-platform Electron desktop app
          - Workflow engine for data transformations
          - Advanced formula support (SUMIFS, PIVOT, TEXT_JOIN)
          
          ### üîß Technical Improvements
          - Rust backend for performance
          - TypeScript frontend
          - Tailwind CSS styling
          - SQLite database integration
          
          ### üì¶ Downloads
          - Windows: `.exe` installer
          - macOS: `.dmg` package
          - Linux: `.AppImage` package
          
          ### üêõ Bug Fixes
          - Fixed UI rendering issues
          - Improved navigation
          - Enhanced error handling
          
          ### üìã Installation
          1. Download the appropriate package for your platform
          2. Run the installer/package
          3. Launch Data Studio v2
          
          ### üîÑ Auto-updates
          The app will automatically check for updates and notify you when new versions are available.
          
          ### üìö Documentation
          - [Setup Guide](SETUP.md)
          - [Cross-platform Build Guide](CROSS_PLATFORM_BUILD.md)
          - [Integration Guide](INTEGRATION_GUIDE.md)
          
          ### ü§ù Contributing
          We welcome contributions! Please see our contributing guidelines.
          
          ### üìÑ License
          MIT License - see LICENSE file for details.

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: frontend/dist/
        asset_name: ${{ matrix.platform }}-assets
        asset_content_type: application/octet-stream

    # Version bumping removed - we don't want to increment versions on main branch for test releases

    - name: Notify release completion
      run: |
        echo "üéâ Release ${{ github.ref_name }} completed successfully!"
        echo "üì¶ Assets uploaded to GitHub release"
        echo "üîÑ Auto-updates will be available to users"
